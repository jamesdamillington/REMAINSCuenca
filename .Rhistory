library(tibble)
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
install.packages("conflicted")
library(conflicted)
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
load("C:/Users/James/OneDrive - King's College London/Teaching/Students/PhD/Students/Current/Primary/Moreu-Vicente/REMAINSCuenca/data/orography.rda")
View(orography)
class(orography)
load("C:/Users/James/OneDrive - King's College London/Teaching/Students/PhD/Students/Current/Primary/Moreu-Vicente/REMAINSCuenca/data/landscape.rda")
View(landscape)
df <- landscape[1:3,]
df
gradient = ifelse(orography$slope<=5, 2,
ifelse(orography$slope<=10, 3,
ifelse(orography$slope<=15, 4,
ifelse(orography$slope<=20, 5, 6))))
land.fire.suscep = ifelse(df$lct %in% c("urban", "water"), 0,
ifelse(df$lct %in% c("baresoil", "crop"), 2,
ifelse(df$lct == "grass", 3, 4)))
df
land.fire.suscep
danger = land$prob.fire * gradient * land.fire.suscep
danger = df$prob.fire * gradient * land.fire.suscep
df
danger
View(landscape)
df <- landscape[1:30,]
df
sland = df %>% filter(lct!="water") %>% filter(lct!="urban") %>% filter(lct!="baresoil") %>% select(-trans.type)
sland = df %>% filter(lct!="water") %>% filter(lct!="urban") %>% filter(lct!="baresoil")
sland = sland %>% left_join(select(orography, cell.id, region, elevation), by="cell.id")
sland
sland$p = fire.risk(sland, 1)
gradient = ifelse(orography$slope<=5, 2,
ifelse(orography$slope<=10, 3,
ifelse(orography$slope<=15, 4,
ifelse(orography$slope<=20, 5, 6))))
land.fire.suscep = ifelse(sland$lct %in% c("urban", "water"), 0,
ifelse(sland$lct %in% c("baresoil", "crop"), 2,
ifelse(sland$lct == "grass", 3, 4)))
danger = sland$prob.fire * gradient * land.fire.suscep
danger
danger = sland$prob.fire * gradient * sland.fire.suscep
danger = gradient * land.fire.suscep
gc()
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
gc()
load("C:/Users/James/OneDrive - King's College London/Teaching/Students/PhD/Students/Current/Primary/Moreu-Vicente/REMAINSCuenca/data/landscape.rda")
sland landscape[1:30,]
sland = landscape[1:30,]
gradient = ifelse(orography$slope<=5, 2,
ifelse(orography$slope<=10, 3,
ifelse(orography$slope<=15, 4,
ifelse(orography$slope<=20, 5, 6))))
land.fire.suscep = ifelse(sland$lct %in% c("urban", "water"), 0,
ifelse(sland$lct %in% c("baresoil", "crop"), 2,
ifelse(sland$lct == "grass", 3, 4)))
sland$prob.fire = 1
sland
## Danger = Fire probability * Susceptibility
danger = land$prob.fire * gradient * land.fire.suscep
danger = sland$prob.fire * gradient * land.fire.suscep
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = FALSE,
params = params, lcc.demand = lcc.demand)
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1, save.land = TRUE,
params = params, lcc.demand = lcc.demand)
dir.create(file.path(scenDir)
)
file.path(scenDir)
)
)
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
library(tibble)  #additional require library
library(conflicted)  #additional require library
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
library(terra)
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
dir.create(file.path(scenDir), showWarnings = F)
dir.create(file.path(scenDir), showWarnings = T)
file.path(scenDir)
dir.create(file.path(scenDir))
dir.create(file.path("outputs"))
dir.create(file.path("outputs"))
dir.create(file.path(scenDir))
dir.create(file.path(scenDir, recursive=TRUE))
dir.create(file.path(scenDir), recursive=TRUE)
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 10
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
seq(from=1,to=50,by=2)
library(tibble)  #additional require library
library(conflicted)  #additional require library
library(terra)
# Scenario name
scenName = "remains_test"
scenDir = paste0("outputs/", scenName)
# Model's parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
names(res)
res$land
res$oak.age
res$pine.age
res$unburnt.land
res$unburnt.oak.age
res$unburnt.pine.age
res$lcc
res$afforest
res$encroach
lc1 <- rast(paste0(scenDir,"/maps/","land.cover.type_run1time1.tif"))
lc3 <- rast(paste0(scenDir,"/maps/","land.cover.type_run1time3.tif"))
lc5 <- rast(paste0(scenDir,"/maps/","land.cover.type_run1time5.tif"))
plot(lc1, lc3, lc5)
plot(lc1)
plot(lc3)
plot(lc5)
fr1 <- rast(paste0(scenDir,"/maps/","firerisk_r1t1.tif"))
fr3 <- rast(paste0(scenDir,"/maps/","firerisk_r1t3.tif"))
fr5 <- rast(paste0(scenDir,"/maps/","firerisk_r1t5.tif"))
plot(fr1)
plot(fr3)
plot(fr5)
plot(lc1, main="land cover t1")
plot(lc3, main="land cover t3")
plot(lc5, main="land cover t5")
plot(fr1, main="fire risk t1")
plot(fr3, main="fire risk t3")
plot(fr5, main="fire risk t5")
View(res)
params
lcc.demand
cat(lcc.demand)
print(lcc.demand)
library(tibble)  #additional required library
library(conflicted)  #additional required library
library(terra) ##additional required library
# Scenario name
scenName = "remains_test_wildfireF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = FALSE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
library(tibble)  #additional required library
library(conflicted)  #additional required library
library(terra) ##additional required library
# Scenario name
scenName = "remains_test_wildfireF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = FALSE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = TRUE)
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = FALSE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
# Scenario name
scenName = "remains_test_wildfireF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = FALSE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
# Scenario name
scenName = "remains_test_prescribedF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = FALSE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
# Scenario name
scenName = "remains_test_pfireregenF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = FALSE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
# Scenario name
scenName = "remains_test_forrecoverF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = FALSE,
is.afforestation = TRUE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
# Scenario name
scenName = "remains_test_afforestationF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = FALSE, is.encroachment = TRUE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
# Scenario name
scenName = "remains_test_encroachmentF"
scenDir = paste0("outputs/", scenName)
# Model parameters
params = default.params()
params$time.horizon = 5
params$tseq.save.land = seq(from=1,to=50,by=2)
params$tseq.out.maps = seq(from=1,to=50,by=2)
lcc.demand = data.frame(SmartPlant = round(runif(50, 1, 10)),
AgriConver = round(runif(50, 1, 10)),
RuralAbnd = round(runif(50, 1, 10)),
PastureAbnd = round(runif(50, 1, 10)),
PastureConvert = round(runif(50, 1, 10)))
# Run the model
res = land.dyn.mdl(scenDir = scenDir, is.land.cover.change = TRUE, is.wildfire = TRUE,
is.prescribed.burn = TRUE, is.postfire.rege = TRUE, is.forest.recover = TRUE,
is.afforestation = TRUE, is.encroachment = FALSE, nrun = 1,
write.outputs = TRUE, save.land = TRUE, out.maps = TRUE,
params = params, lcc.demand = lcc.demand, verbose = FALSE)
